plugins {
    id 'java'
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    implementation 'com.opencsv:opencsv:5.5.2'
}

test {
    ignoreFailures = true
    useJUnitPlatform()
}

mainClassName = 'edu.odu.cs.Semester'
application {
    mainClass = 'edu.odu.cs.Semester'
}

java {
	sourceCompatibility = JavaVersion.toVersion(11)
	targetCompatibility = JavaVersion.toVersion(11)
}

task gstatus2 () {
    doLast {
        printIn "Check out repository status"
        exec {
            workingDir = '.'
            commandLine = ['git', 'status']
        }
    }

check.dependsOn htmlDependencyReport

task copyWebPages (type: Copy) {
    from 'src/main/html'
    into 'build/reports'
}

task copyDocs (type: Copy) {
    from 'build/docs'
    into 'build/reports/docs'
    dependsOn 'javadoc'
}

task buildSite (dependsOn: ['javadoc', 'check', 'copyWebPages', 'copyDocs']) {
    description 'Generate reports website for this project'
}

////////////  Website publication on GitHub pages //////////////////////////

def pagesDir = file("${project.rootDir}/../website-temp").absolutePath

task clearPages(type: Delete) {
    delete pagesDir
}

task workTree(dependsOn: ['clearPages']) {
    doLast {
        exec {
            workingDir = '.'
            commandLine = ['git', 'worktree', 'add', '-f', pagesDir, 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'checkout', 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'pull']
        }
    }
}

task copyReports (type: Copy, dependsOn: ['reports', 'workTree']) {
    from 'build/reports'
    into pagesDir
}

task copyWebsite (dependsOn: ['copyReports']) {
}

task commitWebsite (dependsOn: 'copyWebsite') {
    doLast {
        Date now = new Date()

        exec {
            workingDir = pagesDir
            commandLine = ['git', 'add', pagesDir]
            ignoreExitValue = true
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'commit', '-m', 'Updating webpages at ' + now.toString()]
            ignoreExitValue = true
        }
    }
}

task pushWebsite (type: Exec, dependsOn: 'commitWebsite') {
    workingDir = pagesDir
    commandLine = ['git', 'push']
    ignoreExitValue = true
}

task deployReports (type: Delete, dependsOn: 'pushWebsite') {
    group = "Reporting"
    description 'Commit and push website changes to Github'
    delete pagesDir
}
}
