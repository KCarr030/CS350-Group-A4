plugins {
    id 'java'
    id 'application'
    id 'project-report'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    implementation 'com.opencsv:opencsv:5.5.2'
    implementation 'org.apache.poi:poi:4.1.2'
    implementation 'org.apache.poi:poi-ooxml:4.1.2'
    implementation 'org.apache.poi:poi-ooxml-schemas:4.1.2'
    implementation 'com.opencsv:opencsv:5.7.1'
}

def pagesDir = file("${project.rootDir}/../website-temp").absolutePath

test {
    ignoreFailures = true
    useJUnitPlatform()
}

mainClassName = 'edu.odu.cs.Semester'
application {
    mainClass = 'edu.odu.cs.Semester'
}

java {
	sourceCompatibility = JavaVersion.toVersion(11)
	targetCompatibility = JavaVersion.toVersion(11)
}

task Reports (dependsOn: ['javadoc', 'test']) {
    doLast() {
        copy {
            from(file('src/main/html/'))
            into(file('build/reports'))
        }

        copy {
            from(file('build/docs'))
            into(file('build/reports'))
        }
    }
}

task gstatus () {
    doLast {
        println "Check out repository status"
        exec {
            workingDir = '.'
            commandLine = ['git', 'status']
        }
    }
}

task clearPages(type: Delete) {
    delete pagesDir
}

task workTree(dependsOn: ['clearPages']) { 
    doLast {
        exec {
            workingDir = '.'
            commandLine = ['git', 'worktree', 'add', '-f', pagesDir, 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'checkout', 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'pull']
        }
    }
}

task copyReports (type: Copy, dependsOn: ['Reports', 'workTree']) {
    from 'build/reports'
    into pagesDir
}

task copyWebsite (dependsOn: ['copyReports']) {
}

task commitWebsite (dependsOn: 'copyWebsite') {
    doLast {
        Date now = new Date()

        exec {
            workingDir = pagesDir
            commandLine = ['git', 'add', pagesDir]
            ignoreExitValue = true
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'commit', '-m', 'Updating webpages at ' + now.toString()]
            ignoreExitValue = true
        }
    }
}

task pushWebsite (type: Exec, dependsOn: 'commitWebsite') {
    workingDir = pagesDir
    commandLine = ['git', 'push']
    ignoreExitValue = true
}

task deployReports (type: Delete, dependsOn: 'pushWebsite') {
    group = "Reporting"
    description  'Commit and push website changes to GitHub'
    
    doLast {
        copy {
            from(file('build/reports'))
            into(file('build/gh-pages'))
        }

        exec {
            workingDir = pagesDir
            commandLine = ['git', 'add', '.']
        }
        /*exec {
            workingDir = pagesDir
            commandLine = ['cmd', 'git', 'commit', '-m', 'Updating-Webpages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'push']
        }*/
    }
}

javadoc{}
